To set the window size and the packet length: change them at the top in BOTH the client and server files.

***WARNING***: The change must be done in both files for it to take effect. Otherwise, the data may be corrupted.

To send a file, follow the steps:
    1. Compile the client using gcc client.c -o client
    2. Compile the server using gcc server.c -o server
    3. Put the text data in a file named "file.txt" in the same directory as the client and server
    4. Run the server using ./server
    5. Run the client using ./client

The client will send the file to the server, and the server will store the file contents in the file out.txt.

I implemented the given protocol using multithreading via pthreads since recvfrom() is a blocking system call. So, once the packet is sent, a separate thread is created for receiving the packet. At any given time in the system, the number of threads is equal to the window size. Once a thread is done receiving the packet, it sets the ack_recv array element to 1 and the window slides. Some threads may finish before others, but the window will only slide once all the threads have finished receiving their packets. 

So, while there's technically no limit on the window size, it's bound by the number of threads the system can handle.
I tested the program on my machine with a window size of 50 and packet size 400 for a 28kB file and it worked fine.

Aditionally, the program is also capable of handling the same packet being dropped multiple times.






